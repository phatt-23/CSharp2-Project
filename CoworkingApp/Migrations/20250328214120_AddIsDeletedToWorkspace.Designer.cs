// <auto-generated />
using System;
using CoworkingApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CoworkingApp.Migrations
{
    [DbContext(typeof(CoworkingDbContext))]
    [Migration("20250328214120_AddIsDeletedToWorkspace")]
    partial class AddIsDeletedToWorkspace
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CoworkingApp.Models.DataModels.CoworkingCenter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("description");

                    b.Property<decimal>("Latitude")
                        .HasPrecision(9, 6)
                        .HasColumnType("numeric(9,6)")
                        .HasColumnName("latitude");

                    b.Property<decimal>("Longitude")
                        .HasPrecision(9, 6)
                        .HasColumnType("numeric(9,6)")
                        .HasColumnName("longitude");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("coworking_center_pkey");

                    b.ToTable("coworking_center");
                });

            modelBuilder.Entity("CoworkingApp.Models.DataModels.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("customer_email");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("end_time");

                    b.Property<decimal>("Price")
                        .HasColumnType("money")
                        .HasColumnName("price");

                    b.Property<int?>("PricingId")
                        .HasColumnType("integer")
                        .HasColumnName("pricing_id");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("start_time");

                    b.Property<int>("WorkspaceId")
                        .HasColumnType("integer")
                        .HasColumnName("workspace_id");

                    b.HasKey("Id")
                        .HasName("reservation_pkey");

                    b.HasIndex("PricingId");

                    b.HasIndex("WorkspaceId");

                    b.ToTable("reservation");
                });

            modelBuilder.Entity("CoworkingApp.Models.DataModels.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("password_hash");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("user_pkey");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "Email" }, "user_email_key")
                        .IsUnique();

                    b.ToTable("user");
                });

            modelBuilder.Entity("CoworkingApp.Models.DataModels.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("user_role_pkey");

                    b.HasIndex(new[] { "Name" }, "user_role_name_key")
                        .IsUnique();

                    b.ToTable("user_role");
                });

            modelBuilder.Entity("CoworkingApp.Models.DataModels.Workspace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CoworkingCenterId")
                        .HasColumnType("integer")
                        .HasColumnName("coworking_center_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("description");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("boolean")
                        .HasColumnName("is_removed");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer")
                        .HasColumnName("status_id");

                    b.HasKey("Id")
                        .HasName("workspace_pkey");

                    b.HasIndex("CoworkingCenterId");

                    b.HasIndex("StatusId");

                    b.ToTable("workspace");
                });

            modelBuilder.Entity("CoworkingApp.Models.DataModels.WorkspaceHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer")
                        .HasColumnName("status_id");

                    b.Property<int>("WorkspaceId")
                        .HasColumnType("integer")
                        .HasColumnName("workspace_id");

                    b.HasKey("Id")
                        .HasName("workspace_history_pkey");

                    b.HasIndex("StatusId");

                    b.HasIndex("WorkspaceId");

                    b.ToTable("workspace_history");
                });

            modelBuilder.Entity("CoworkingApp.Models.DataModels.WorkspacePricing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("PricePerHour")
                        .HasColumnType("money")
                        .HasColumnName("price_per_hour");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("valid_from");

                    b.Property<DateTime?>("ValidTo")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("valid_to");

                    b.Property<int>("WorkspaceId")
                        .HasColumnType("integer")
                        .HasColumnName("workspace_id");

                    b.HasKey("Id")
                        .HasName("workspace_pricing_pkey");

                    b.HasIndex("WorkspaceId");

                    b.ToTable("workspace_pricing");
                });

            modelBuilder.Entity("CoworkingApp.Models.DataModels.WorkspaceStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("workspace_status_pkey");

                    b.HasIndex(new[] { "Name" }, "workspace_status_name_key")
                        .IsUnique();

                    b.ToTable("workspace_status");
                });

            modelBuilder.Entity("CoworkingApp.Models.DataModels.Reservation", b =>
                {
                    b.HasOne("CoworkingApp.Models.DataModels.WorkspacePricing", "Pricing")
                        .WithMany("Reservations")
                        .HasForeignKey("PricingId")
                        .HasConstraintName("reservation_pricing_id_fkey");

                    b.HasOne("CoworkingApp.Models.DataModels.Workspace", "Workspace")
                        .WithMany("Reservations")
                        .HasForeignKey("WorkspaceId")
                        .IsRequired()
                        .HasConstraintName("reservation_workspace_id_fkey");

                    b.Navigation("Pricing");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("CoworkingApp.Models.DataModels.User", b =>
                {
                    b.HasOne("CoworkingApp.Models.DataModels.UserRole", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("user_role_id_fkey");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CoworkingApp.Models.DataModels.Workspace", b =>
                {
                    b.HasOne("CoworkingApp.Models.DataModels.CoworkingCenter", "CoworkingCenter")
                        .WithMany("Workspaces")
                        .HasForeignKey("CoworkingCenterId")
                        .IsRequired()
                        .HasConstraintName("workspace_coworking_center_id_fkey");

                    b.HasOne("CoworkingApp.Models.DataModels.WorkspaceStatus", "Status")
                        .WithMany("Workspaces")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("workspace_status_id_fkey");

                    b.Navigation("CoworkingCenter");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("CoworkingApp.Models.DataModels.WorkspaceHistory", b =>
                {
                    b.HasOne("CoworkingApp.Models.DataModels.WorkspaceStatus", "Status")
                        .WithMany("WorkspaceHistories")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("workspace_history_status_id_fkey");

                    b.HasOne("CoworkingApp.Models.DataModels.Workspace", "Workspace")
                        .WithMany("WorkspaceHistories")
                        .HasForeignKey("WorkspaceId")
                        .IsRequired()
                        .HasConstraintName("workspace_history_workspace_id_fkey");

                    b.Navigation("Status");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("CoworkingApp.Models.DataModels.WorkspacePricing", b =>
                {
                    b.HasOne("CoworkingApp.Models.DataModels.Workspace", "Workspace")
                        .WithMany("WorkspacePricings")
                        .HasForeignKey("WorkspaceId")
                        .IsRequired()
                        .HasConstraintName("workspace_pricing_workspace_id_fkey");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("CoworkingApp.Models.DataModels.CoworkingCenter", b =>
                {
                    b.Navigation("Workspaces");
                });

            modelBuilder.Entity("CoworkingApp.Models.DataModels.UserRole", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("CoworkingApp.Models.DataModels.Workspace", b =>
                {
                    b.Navigation("Reservations");

                    b.Navigation("WorkspaceHistories");

                    b.Navigation("WorkspacePricings");
                });

            modelBuilder.Entity("CoworkingApp.Models.DataModels.WorkspacePricing", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("CoworkingApp.Models.DataModels.WorkspaceStatus", b =>
                {
                    b.Navigation("WorkspaceHistories");

                    b.Navigation("Workspaces");
                });
#pragma warning restore 612, 618
        }
    }
}
