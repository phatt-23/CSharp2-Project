// <auto-generated />
using System;
using CoworkingApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CoworkingApp.Migrations
{
    [DbContext(typeof(CoworkingDbContext))]
    [Migration("20250501192319_vuong")]
    partial class vuong
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CoworkingApp.Models.DataModels.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("address_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AddressId"));

                    b.Property<int>("CityId")
                        .HasColumnType("integer")
                        .HasColumnName("city_id");

                    b.Property<string>("District")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("district");

                    b.Property<DateTime>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<decimal>("Latitude")
                        .HasPrecision(9, 6)
                        .HasColumnType("numeric(9,6)")
                        .HasColumnName("latitude");

                    b.Property<decimal>("Longitude")
                        .HasPrecision(9, 6)
                        .HasColumnType("numeric(9,6)")
                        .HasColumnName("longitude");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("postal_code");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("street_address");

                    b.HasKey("AddressId")
                        .HasName("address_pkey");

                    b.HasIndex("CityId");

                    b.ToTable("address");
                });

            modelBuilder.Entity("CoworkingApp.Models.DataModels.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("city_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CityId"));

                    b.Property<int>("CountryId")
                        .HasColumnType("integer")
                        .HasColumnName("country_id");

                    b.Property<DateTime>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("CityId")
                        .HasName("city_pkey");

                    b.HasIndex("CountryId");

                    b.ToTable("city");
                });

            modelBuilder.Entity("CoworkingApp.Models.DataModels.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("country_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CountryId"));

                    b.Property<DateTime>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("CountryId")
                        .HasName("country_pkey");

                    b.HasIndex(new[] { "Name" }, "unique_country_name")
                        .IsUnique();

                    b.ToTable("country");
                });

            modelBuilder.Entity("CoworkingApp.Models.DataModels.CoworkingCenter", b =>
                {
                    b.Property<int>("CoworkingCenterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("coworking_center_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CoworkingCenterId"));

                    b.Property<int>("AddressId")
                        .HasColumnType("integer")
                        .HasColumnName("address_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("description");

                    b.Property<bool>("IsRemoved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_removed");

                    b.Property<DateTime>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.HasKey("CoworkingCenterId")
                        .HasName("coworking_center_pkey");

                    b.HasIndex("AddressId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("coworking_center");
                });

            modelBuilder.Entity("CoworkingApp.Models.DataModels.Reservation", b =>
                {
                    b.Property<int>("ReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("reservation_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ReservationId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("end_time");

                    b.Property<bool>("IsCancelled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_cancelled");

                    b.Property<int>("PricingId")
                        .HasColumnType("integer")
                        .HasColumnName("pricing_id");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("start_time");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("money")
                        .HasColumnName("total_price");

                    b.Property<int>("WorkspaceId")
                        .HasColumnType("integer")
                        .HasColumnName("workspace_id");

                    b.HasKey("ReservationId")
                        .HasName("reservation_pkey");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PricingId");

                    b.HasIndex("WorkspaceId");

                    b.ToTable("reservation");
                });

            modelBuilder.Entity("CoworkingApp.Models.DataModels.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("IsRemoved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_removed");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("password_hash");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("refresh_token");

                    b.Property<DateTime?>("RefreshTokenExpiry")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("refresh_token_expiry");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.HasKey("UserId")
                        .HasName("user_pkey");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "Email" }, "user_email_key")
                        .IsUnique();

                    b.ToTable("user");
                });

            modelBuilder.Entity("CoworkingApp.Models.DataModels.UserRole", b =>
                {
                    b.Property<int>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("user_role_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserRoleId"));

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.HasKey("UserRoleId")
                        .HasName("user_role_pkey");

                    b.HasIndex(new[] { "Name" }, "user_role_name_key")
                        .IsUnique();

                    b.ToTable("user_role");
                });

            modelBuilder.Entity("CoworkingApp.Models.DataModels.Workspace", b =>
                {
                    b.Property<int>("WorkspaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("workspace_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WorkspaceId"));

                    b.Property<int>("CoworkingCenterId")
                        .HasColumnType("integer")
                        .HasColumnName("coworking_center_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("description");

                    b.Property<bool>("IsRemoved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_removed");

                    b.Property<DateTime>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.HasKey("WorkspaceId")
                        .HasName("workspace_pkey");

                    b.HasIndex("CoworkingCenterId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("workspace");
                });

            modelBuilder.Entity("CoworkingApp.Models.DataModels.WorkspaceHistory", b =>
                {
                    b.Property<int>("WorkspaceHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("workspace_history_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WorkspaceHistoryId"));

                    b.Property<DateTime>("ChangeAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("change_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("ReservationId")
                        .HasColumnType("integer")
                        .HasColumnName("reservation_id");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer")
                        .HasColumnName("status_id");

                    b.Property<int>("WorkspaceId")
                        .HasColumnType("integer")
                        .HasColumnName("workspace_id");

                    b.HasKey("WorkspaceHistoryId")
                        .HasName("workspace_history_pkey");

                    b.HasIndex("ReservationId");

                    b.HasIndex("StatusId");

                    b.HasIndex("WorkspaceId");

                    b.ToTable("workspace_history");
                });

            modelBuilder.Entity("CoworkingApp.Models.DataModels.WorkspacePricing", b =>
                {
                    b.Property<int>("WorkspacePricingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("workspace_pricing_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WorkspacePricingId"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by")
                        .HasComment("if null then it was created by the database admin who has direct access to the database");

                    b.Property<decimal>("PricePerHour")
                        .HasColumnType("money")
                        .HasColumnName("price_per_hour")
                        .HasComment("dollar\n");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("valid_from");

                    b.Property<DateTime?>("ValidUntil")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("valid_until");

                    b.Property<int>("WorkspaceId")
                        .HasColumnType("integer")
                        .HasColumnName("workspace_id");

                    b.HasKey("WorkspacePricingId")
                        .HasName("workspace_pricing_pkey");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("WorkspaceId");

                    b.ToTable("workspace_pricing");
                });

            modelBuilder.Entity("CoworkingApp.Models.DataModels.WorkspaceStatus", b =>
                {
                    b.Property<int>("WorkspaceStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("workspace_status_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WorkspaceStatusId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.HasKey("WorkspaceStatusId")
                        .HasName("workspace_status_pkey");

                    b.HasIndex(new[] { "Name" }, "workspace_status_name_key")
                        .IsUnique();

                    b.ToTable("workspace_status");
                });

            modelBuilder.Entity("CoworkingApp.Models.DataModels.Address", b =>
                {
                    b.HasOne("CoworkingApp.Models.DataModels.City", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("CityId")
                        .IsRequired()
                        .HasConstraintName("address_city_id_fkey");

                    b.Navigation("City");
                });

            modelBuilder.Entity("CoworkingApp.Models.DataModels.City", b =>
                {
                    b.HasOne("CoworkingApp.Models.DataModels.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .IsRequired()
                        .HasConstraintName("city_country_id_fkey");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("CoworkingApp.Models.DataModels.CoworkingCenter", b =>
                {
                    b.HasOne("CoworkingApp.Models.DataModels.Address", "Address")
                        .WithMany("CoworkingCenters")
                        .HasForeignKey("AddressId")
                        .IsRequired()
                        .HasConstraintName("coworking_center_address_id_fkey");

                    b.HasOne("CoworkingApp.Models.DataModels.User", "UpdatedByNavigation")
                        .WithMany("CoworkingCenters")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("coworking_center_updated_by_fkey");

                    b.Navigation("Address");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("CoworkingApp.Models.DataModels.Reservation", b =>
                {
                    b.HasOne("CoworkingApp.Models.DataModels.User", "Customer")
                        .WithMany("Reservations")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("reservation_customer_id_fkey");

                    b.HasOne("CoworkingApp.Models.DataModels.WorkspacePricing", "Pricing")
                        .WithMany("Reservations")
                        .HasForeignKey("PricingId")
                        .IsRequired()
                        .HasConstraintName("reservation_pricing_id_fkey");

                    b.HasOne("CoworkingApp.Models.DataModels.Workspace", "Workspace")
                        .WithMany("Reservations")
                        .HasForeignKey("WorkspaceId")
                        .IsRequired()
                        .HasConstraintName("reservation_workspace_id_fkey");

                    b.Navigation("Customer");

                    b.Navigation("Pricing");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("CoworkingApp.Models.DataModels.User", b =>
                {
                    b.HasOne("CoworkingApp.Models.DataModels.UserRole", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("user_role_id_fkey");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CoworkingApp.Models.DataModels.Workspace", b =>
                {
                    b.HasOne("CoworkingApp.Models.DataModels.CoworkingCenter", "CoworkingCenter")
                        .WithMany("Workspaces")
                        .HasForeignKey("CoworkingCenterId")
                        .IsRequired()
                        .HasConstraintName("workspace_coworking_center_id_fkey");

                    b.HasOne("CoworkingApp.Models.DataModels.User", "UpdatedByNavigation")
                        .WithMany("Workspaces")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("workspace_updated_by_fkey");

                    b.Navigation("CoworkingCenter");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("CoworkingApp.Models.DataModels.WorkspaceHistory", b =>
                {
                    b.HasOne("CoworkingApp.Models.DataModels.Reservation", "Reservation")
                        .WithMany("WorkspaceHistories")
                        .HasForeignKey("ReservationId")
                        .HasConstraintName("workspace_history_reservation_id_fkey");

                    b.HasOne("CoworkingApp.Models.DataModels.WorkspaceStatus", "Status")
                        .WithMany("WorkspaceHistories")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("workspace_history_status_id_fkey");

                    b.HasOne("CoworkingApp.Models.DataModels.Workspace", "Workspace")
                        .WithMany("WorkspaceHistories")
                        .HasForeignKey("WorkspaceId")
                        .IsRequired()
                        .HasConstraintName("workspace_history_workspace_id_fkey");

                    b.Navigation("Reservation");

                    b.Navigation("Status");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("CoworkingApp.Models.DataModels.WorkspacePricing", b =>
                {
                    b.HasOne("CoworkingApp.Models.DataModels.User", "CreatedByNavigation")
                        .WithMany("WorkspacePricings")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("workspace_pricing_created_by_fkey");

                    b.HasOne("CoworkingApp.Models.DataModels.Workspace", "Workspace")
                        .WithMany("WorkspacePricings")
                        .HasForeignKey("WorkspaceId")
                        .IsRequired()
                        .HasConstraintName("workspace_pricing_workspace_id_fkey");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("CoworkingApp.Models.DataModels.Address", b =>
                {
                    b.Navigation("CoworkingCenters");
                });

            modelBuilder.Entity("CoworkingApp.Models.DataModels.City", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("CoworkingApp.Models.DataModels.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("CoworkingApp.Models.DataModels.CoworkingCenter", b =>
                {
                    b.Navigation("Workspaces");
                });

            modelBuilder.Entity("CoworkingApp.Models.DataModels.Reservation", b =>
                {
                    b.Navigation("WorkspaceHistories");
                });

            modelBuilder.Entity("CoworkingApp.Models.DataModels.User", b =>
                {
                    b.Navigation("CoworkingCenters");

                    b.Navigation("Reservations");

                    b.Navigation("WorkspacePricings");

                    b.Navigation("Workspaces");
                });

            modelBuilder.Entity("CoworkingApp.Models.DataModels.UserRole", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("CoworkingApp.Models.DataModels.Workspace", b =>
                {
                    b.Navigation("Reservations");

                    b.Navigation("WorkspaceHistories");

                    b.Navigation("WorkspacePricings");
                });

            modelBuilder.Entity("CoworkingApp.Models.DataModels.WorkspacePricing", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("CoworkingApp.Models.DataModels.WorkspaceStatus", b =>
                {
                    b.Navigation("WorkspaceHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
