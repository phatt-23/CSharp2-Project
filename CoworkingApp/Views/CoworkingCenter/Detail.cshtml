@using CoworkingApp.Models.DataModels
@using CoworkingApp.Models.Misc
@using CoworkingApp.Types
@model CoworkingApp.Models.DataModels.CoworkingCenter
@{
    Layout = "_Layout";
    ViewData["Title"] = "Coworking Center Detail";

    var locationJson = System.Text.Json.JsonSerializer.Serialize(new
    {
        Latitude = Model.Address.Latitude,
        Longitude = Model.Address.Longitude
    }, JsonDefaults.NO_CYCLES);
}

@section Scripts {
<script>
document.addEventListener('DOMContentLoaded', function () 
{
    const location = JSON.parse('@Html.Raw(locationJson)');
    const coordinates = [location.Latitude, location.Longitude];

    let map = L.map($('#map')[0]).setView(coordinates, 10)

    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '&copy; OpenStreetMap contributors'
    }).addTo(map)

    L.marker(coordinates)
        .addTo(map)
        .bindPopup(`
            <h2>NOWHERE</h2>
                <p>
                <br/>
                NO CITY, NO COUNTRY<br/>
                Lat: 30,000000, Lng: 40,000000
            </p>
        `)

    const filterDropdown = document.getElementById('workspace-filter')
    const workspaceCards = document.querySelectorAll('.workspace-card')
    const noWorkspacesMessage = document.getElementById('no-workspaces-message')

    filterDropdown.addEventListener('change', function () {
        const filterValue = filterDropdown.value
        let visibleCount = 0

        workspaceCards.forEach(card => {
            const status = card.getAttribute('data-status')

            // Show or hide cards based on the filter
            if (filterValue === 'all' || 
                (filterValue === 'available' && status === 'Available') ||
                (filterValue === 'unavailable' && status !== 'Available')) 
            {
                // Show
                card.parentElement.style.display = ''
                visibleCount++
            } else {
                // Hide
                card.parentElement.style.display = 'none'
            }
        })

        // none are visible, then show different message
        if (visibleCount == 0) {
            noWorkspacesMessage.style.display = 'block'
        } else {
            noWorkspacesMessage.style.display = 'none'
        }
    })
})
</script>
}

<main id="coworking-center-detail">
    <!-- breadcrumb -->
    <nav aria-label="breadcrumb">
        @Html.ActionLink(linkText: "Go to centers listing", actionName: "Index", controllerName: "CoworkingCenter")
    </nav>

    <!-- details panel -->
    <section aria-labelledby="center-details-heading">
        <!-- name -->
        <h1 id="center-name">@Model.Name</h1>

        <!-- description -->
        <p>@Model.Description</p>

        <p>
            <strong>Available workspaces:</strong> 
            @Model.Workspaces.Where(x => x.GetCurrentStatus().Type == WorkspaceStatusType.Available).Count()
            /
            @Model.Workspaces.Count()
        </p>

        <!-- address -->
        <address>
            @Model.Address.StreetAddress<br/>
            @(Model.Address.City?.Name ?? "NO CITY"), @(Model.Address.City?.Country.Name ?? "NO COUNTRY")<br/>
            Lat: @Model.Address.Latitude, Lng: @Model.Address.Longitude
        </address>
    </section>

    <hr/>

    <!-- map panel -->
    <section aria-labelledby="center-map-heading">
        <h3 id="center-map-heading">Location Map</h3>
        <div id="map" style="height:400px;"></div>
    </section>

    <hr/>

    <!-- related workspaces -->
    <section aria-labelledby="workspaces-heading">
        <h2 id="workspaces-heading">Workspaces</h2>

        <select id="workspace-filter">
            <option value="all" selected>All Workspaces</option>
            <option value="available">Available Workspaces</option>
            <option value="unavailable">Unavailable Workspaces</option>
        </select>

        <p id="no-workspaces-message" style="display: none;">No workspaces match the selected filter.</p>

        @if (Model.Workspaces.Any())
        {
            <ul class="workspace-list">
                @foreach (var ws in Model.Workspaces)
                {
                    <li>
                        <article class="workspace-card" data-status="@ws.GetCurrentStatus().Type.ToReprString()" aria-labelledby="workspace-@ws.WorkspaceId-name">
                            <h3 id="workspace-@ws.WorkspaceId-name">@ws.Name</h3>
                            <p>@ws.Description</p>
                            <p>
                                <strong>Price:</strong> @(ws.WorkspacePricings.OrderByDescending(x => x.CreatedBy).First().PricePerHour)&dollar; per hour
                            </p>
                            <p>
                                <strong>Status:</strong> @ws.GetCurrentStatus().Type.ToReprString()
                            </p>
                            <menu>
                                @Html.ActionLink(linkText: "Detail", actionName: "Detail", controllerName: "Workspace", new { id = ws.WorkspaceId })

                                @if (ws.GetCurrentStatus().Type == WorkspaceStatusType.Available)
                                {
                                    @if (User.IsAuthenticated())
                                    {
                                        @Html.ActionLink(linkText: "Reserve", actionName: "Reserve", controllerName: "Workspace", new { id = ws.WorkspaceId })
                                    }
                                    else
                                    {
                                        @Html.ActionLink(linkText: "Reserve", actionName: "Login", controllerName: "Account")
                                    }
                                }
                            </menu>
                        </article>
                    </li>
                }
            </ul>
        }
        else
        {
            <p>There are no workspaces in this center :(</p>
        }
    </section>
</main>


@section Styles {
<style>
/* Workspace list container */
#coworking-center-detail .workspace-list {
  list-style: none;
  padding: 0;
}

/* Individual workspace cards */
#coworking-center-detail .workspace-list .workspace-card {
  border: 1px solid gray;
  padding: 0.5rem;
  margin: 0.5rem;
  transition: opacity 0.3s ease, transform 0.3s ease;
}

/* Menu inside each card, pushed to bottom */
#coworking-center-detail .workspace-list .workspace-card menu {
  margin-top: auto; /* push to bottom */
  display: flex;
  justify-content: flex-end;
  gap: 0.5rem;
}

/* Hover effect for workspace cards */
#coworking-center-detail .workspace-list .workspace-card:hover {
  box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
}

/* Hidden cards transition state */
#coworking-center-detail .workspace-card[style*="display: none"] {
  opacity: 0;
  transform: scale(0.95);
}

/* "No workspaces" message default state */
#coworking-center-detail #no-workspaces-message {
  transition: opacity 0.3s ease;
  opacity: 0;
}

/* "No workspaces" message visible state */
#coworking-center-detail #no-workspaces-message[style*="display: block"] {
  opacity: 1;
}

</style>
}