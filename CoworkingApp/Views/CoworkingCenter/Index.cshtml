@using System.Text.Json;
@using CoworkingApp.Models.DataModels
@using CoworkingApp.Services;
@using CoworkingApp.Types
@model CoworkingApp.Models.ViewModels.CoworkingCenterIndexViewModel;

@{
    ViewBag.Title = "Coworking Centers";
    Layout = "_Layout";

    var pageCount = Math.Ceiling(Model.TotalCount / (decimal)Model.Pagination.PageSize);

    // send this data to the js side below to add them onto the leaflet map
    var centersData = Model.CoworkingCenters
        .ToList()
        .Select(c =>
        {
            var city = (c.Address.City != null) ? c.Address.City?.Name : "NO CITY";
            var country = (c.Address.City?.Country != null) ? c.Address.City?.Country?.Name : "NO COUNTRY";

            var addressDiplay = $"{c.Address.StreetAddress}, {city}, {country}";

            return new {
                c.CoworkingCenterId,
                c.Name,
                c.Description,
                c.Address,
                AddressDisplayName = addressDiplay,
            };
        });

    var centersJson = System.Text.Json.JsonSerializer.Serialize(centersData, JsonDefaults.NO_CYCLES);
}

@section Scripts {
    <script>
        let centersMap;

        document.addEventListener("DOMContentLoaded", async function () {
            centersMap = L.map( $('#centers-map')[0] ).setView([50.0755, 14.4378], 2)  // prague

            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                maxZoom: 19,
                attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
            }).addTo(centersMap)

            const centers = @Html.Raw(centersJson)  // deserialize center data from Razor

            centers.forEach(center => {
                L.marker([center.Address.Latitude, center.Address.Longitude]).addTo(centersMap)
                    .bindPopup(`
                        <strong><a href='/CoworkingCenter/Detail/${center.CoworkingCenterId}'>${center.Name}</a></strong>
                        <br>
                        <p><strong>${center.AddressDisplayName}</strong></p>
                        <p>${center.Description}</p>
                        <a align='right' href='/CoworkingCenter/Detail/${center.CoworkingCenterId}'>
                            View detail
                        </a>
                    `)
            })
        })

        function seeOnMap(latitude, longitue) {
            centersMap.flyTo([latitude, longitue], 12, { duration: 1 });
        }
    </script>
}

<main id="coworking-center-index">
    <h2>Coworking Centers</h2>

    <section id="map-section" aria-label="Map of all coworking centers">
        <div id="centers-map" style="height: 400px;"></div>
    </section>

    <!-- pagination -->
    <section id="pagination-section">
        @Html.ActionLink("Back", "Index", "CoworkingCenter", new { PageNumber = Math.Max(Model.Pagination.PageNumber - 1, 1), PageSize = Model.Pagination.PageSize })
        @for (int i = 1; i <= pageCount; i++)
        {
            if (i == Model.Pagination.PageNumber) 
            {
                <u><b>@Html.ActionLink(i.ToString(), "Index", "CoworkingCenter", new { PageNumber = i, PageSize = Model.Pagination.PageSize })</b></u>
            }
            else
            {
                @Html.ActionLink(i.ToString(), "Index", "CoworkingCenter", new { PageNumber = i, PageSize = Model.Pagination.PageSize })
            }
        }
        @Html.ActionLink("Next", "Index", "CoworkingCenter", new { PageNumber = Math.Min(Model.Pagination.PageNumber + 1, pageCount), PageSize = Model.Pagination.PageSize })
    </section>
    
    @if (Model.CoworkingCenters.Any())
    {
        <!-- coworking center cards -->
        <ul>
            @foreach (var center in Model.CoworkingCenters)
            {
                <li>
                    <article>
                        <h3>@center.Name</h3>

                        <p>@center.Description</p>
                        <p><strong>Address:</strong> @center.Address.StreetAddress, @(center.Address.City?.Name ?? "NO CITY"), @(center.Address.City?.Country.Name ?? "NO COUNTRY")</p>
                        <p>
                            <strong>Available workspaces:</strong> 
                            @center.Workspaces.Where(x => x.GetCurrentStatus().Type == WorkspaceStatusType.Available).Count()
                        </p>

                        <menu class="coworking-center-card-controls">
                            @Html.ActionLink(linkText: "View Detail", actionName: "Detail", controllerName: "CoworkingCenter", routeValues: new { id = center.CoworkingCenterId })
                            <a href="#map-section" 
                               onclick="seeOnMap(@center.Address.Latitude.ToString(System.Globalization.CultureInfo.InvariantCulture), @center.Address.Longitude.ToString(System.Globalization.CultureInfo.InvariantCulture))">
                               See on map
                           </a>
                        </menu>
                    </article>
                </li>
            }
        </ul>
    }
    else
    {
        <p>Sorry, there are no coworking centers available.</p>
    }
</main>


@section Styles {
<style>
/* Container */
#coworking-center-index {
  display: flex;
  flex-direction: column;
}

/* Pagination */
#coworking-center-index #pagination-section {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  margin-top: 0.75rem;
  margin-left: auto;
}

#coworking-center-index #pagination-section a {
  text-decoration: none;
  margin-left: 0.5rem;
  /* padding: 0.25rem 0.5rem; */
  /* border: 1px solid #ccc; */
}

/* Grid of centers */
#coworking-center-index ul {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  list-style: none;
  padding: 0;
  row-gap: 0.5rem;
  column-gap: 0.5rem;
}

#coworking-center-index ul li {
  margin-block: 0.5rem;
}

/* Card styles */
#coworking-center-index ul li article {
  display: flex;
  flex-direction: column;
  border: 1px solid gray;
  padding: 0.5rem;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
  height: 100%;
}

#coworking-center-index ul li article h2,
#coworking-center-index ul li article h3,
#coworking-center-index ul li article h4 {
  color: black;
}

#coworking-center-index ul li article p {
  color: black;
}

/* Card controls */
#coworking-center-index ul li article .coworking-center-card-controls {
  margin-top: auto; /* push controls to bottom */
  display: flex;
  justify-content: flex-end;
  gap: 0.5rem;
}

/* Hover state */
#coworking-center-index ul li article:hover {
  box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
}
</style>
}