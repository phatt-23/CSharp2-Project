@using CoworkingApp.Models.DataModels;
@using System.Globalization
@using System.Security.Claims
@model CoworkingApp.Models.ViewModels.WorkspaceDetailViewModel;

@{
    ViewBag.Title = "Workspace Detail";
    Layout = "_Layout";

    var latestWorkspaceHistory = Model.Histories.MaxBy(x => x.ChangeAt);

    var getCurrentPricing = (Workspace w) => w.WorkspacePricings.MaxBy(x => x.ValidFrom);
    var maxDateTime = (DateTime a, DateTime b) => (a > b) ? a : b;
    var minDateTime = (DateTime a, DateTime b) => (a < b) ? a : b;

    // the time span of the timeline (max 1 year ahead)
    var timelineStart = DateTime.Now;
    var timelineEnd = minDateTime(Model.Reservations.Where(x => !x.IsCancelled).Max(x => x.EndTime), DateTime.Today.AddYears(1));

    // sorted reservations by time, filtered by timeline span
    var reservations = Model.Workspace.Reservations
        .OrderBy(r => r.StartTime)
        .Where(x => !x.IsCancelled && timelineStart <= x.EndTime && x.StartTime <= timelineEnd).ToList();

    // build segments of free and reserved times
    var segments = new List<(int? ReservationId, DateTime Start, DateTime End, bool IsReserved, bool BelongsToUser)>();
    var cursor = timelineStart;

    // get the user's id
    var userId = -1;
    var nameIdentifier = User.Claims.FirstOrDefault(x => x.Type == ClaimTypes.NameIdentifier);
    if (nameIdentifier != null)
    {
        userId = int.Parse(nameIdentifier.Value);
    }

    foreach (var res in reservations)
    {
        var reservationBelongsToUser = res.CustomerId == userId;

        // free before this reservation?
        if (cursor < res.StartTime)
        {
            segments.Add((res.ReservationId, cursor, maxDateTime(timelineStart, res.StartTime), false, reservationBelongsToUser));
        }

        // this reserved segment
        segments.Add((res.ReservationId, maxDateTime(timelineStart, res.StartTime), res.EndTime, true, reservationBelongsToUser));

        // next
        cursor = res.EndTime;
    }

    // free after last reservation?
    if (cursor < timelineEnd)
    {
        segments.Add((null, cursor, timelineEnd, false, false));
    }

    var totalHours = (timelineEnd - timelineStart).TotalHours;
}

<main id="workspace-detail-page">
<!-- breadcrumb -->
<nav aria-label="breadcrumb">
    <a asp-action="Index">go to workspace listing</a>
</nav>

<!-- details panel -->
<section aria-labelledby="workspace-details-heading">
    <!-- name -->
    <h1 id="center-name">@Model.Workspace.Name</h1>
    <p><strong>Price:</strong> @(getCurrentPricing(Model.Workspace)!.PricePerHour)&dollar; per hour</p>

    <!-- description -->
    <p>@Model.Workspace.Description</p>

    @if (latestWorkspaceHistory != null) {
        @switch (latestWorkspaceHistory.Status.Type)
        {
            case WorkspaceStatusType.Available:
                <p>
                    <em>This workspace is currently available.</em>
                </p>

                break;
            case WorkspaceStatusType.Reserved:
            case WorkspaceStatusType.Occupied:
                <p>
                    <b><em>Sorry, this workspace is currently not available.</em></b>
                </p>
                    
                break;
            case WorkspaceStatusType.UnderMaintenance:
                <p>
                    <b><em>Sorry, this workspace is currently under maintainance.</em></b>
                </p>
                    
                break;
        }
    }

    <p>
        This workspace is located in
        <b><a asp-controller="CoworkingCenter" asp-action="Detail" asp-route-id="@Model.CoworkingCenter.CoworkingCenterId">@Model.CoworkingCenter.Name</a></b> 
        coworking center.
    </p>

    <!-- address -->
    <address>
        @Model.CoworkingCenter.Address.StreetAddress<br/>
        @Model.CoworkingCenter.Address.City.Name, @Model.CoworkingCenter.Address.City.Country.Name<br/>
        Lat: @Model.CoworkingCenter.Address.Latitude, Lng: @Model.CoworkingCenter.Address.Longitude
    </address>

    <menu>
        @if (User.Identity != null && User.Identity.IsAuthenticated)
        {
            <menuitem>
                <a asp-controller="Workspace" asp-action="Reserve"
                    asp-route-id="@Model.Workspace.WorkspaceId"
                    asp-route-startTime="@(DateTime.Now.AddHours(1).ToString("s", CultureInfo.InvariantCulture))"
                    asp-route-endTime="@(DateTime.Now.AddDays(1).ToString("s", CultureInfo.InvariantCulture))">
                    make a reservation
                </a>
            </menuitem>
        }
        else
        {
            <menuitem>
                <a asp-controller="Account" asp-action="Login">
                    make a reservation
                </a>
            </menuitem>
        }
    </menu>
</section>

<hr />
    

<!-- availability timeline -->
<section id="availability-timeline">
    <h2>Availability Timeline</h2>

    <div class="timeline-wrapper">
        <ol class="timeline">
            @foreach (var (segment, index) in segments.WithIndex())
            {
                var widthPercent = (segment.End - segment.Start).TotalHours / totalHours * 100;  // calculate width %
                var tooltipText = $"{index + 1}) {segment.Start.ToString()} - {segment.End.ToString()}";

                <li class="segment @(segment.IsReserved ? "reserved" : "free")"
                style="width:@widthPercent.ToString(System.Globalization.CultureInfo.InvariantCulture)%"
                >
                    @if (segment.IsReserved)
                    {
                        if (segment.BelongsToUser)
                        {
                            <a asp-controller="Reservation" asp-action="Detail" asp-route-id="@segment.ReservationId">
                                @(index + 1)
                            </a>
                        }
                        else
                        {
                            <a>
                                @(index + 1)
                            </a>
                        }
                    }
                    else
                    {
                        @if (User.Identity != null && User.Identity.IsAuthenticated)
                        {
                            <a asp-controller="Workspace" asp-action="Reserve"
                            asp-route-id="@Model.Workspace.WorkspaceId"
                            asp-route-startTime="@maxDateTime(segment.Start, DateTime.Now.AddHours(1)).ToString("s", CultureInfo.InvariantCulture)"
                            asp-route-endTime="@segment.End.ToString("s", CultureInfo.InvariantCulture)">
                                @(index + 1)
                            </a>
                        }
                        else
                        {
                            <a asp-controller="Account" asp-action="Login">
                                @(index + 1)
                            </a>
                        }
                    }

                    <div class="tooltip">@tooltipText</div>
                </li>
            }
        </ol>
        <div class="timeline-axis">
            @{
                var tickCount = 4;
                var tickHoursStep = totalHours / tickCount;
                var it = timelineStart;

                while (it <= timelineEnd)
                {
                    var leftPercent = (it - timelineStart).TotalHours / totalHours * 100;

                    <div class="tick" style="left:@leftPercent.ToString(System.Globalization.CultureInfo.InvariantCulture)%">
                        <span>
                            @it.ToString("D")
                            <br />
                            @it.ToString("t")
                        </span>
                    </div>

                    it = it.AddHours(tickHoursStep);
                }
            }
        </div>
    </div>

    <h3>Reservations</h3>
    <table>
        <thead>
            <th>#</th>
            <th>start</th>
            <th>end</th>
        </thead>
        <tbody>
            @foreach (var (seg, index) in segments.Where(x => x.IsReserved).WithIndex())
            {
                <tr>
                    @if (seg.BelongsToUser)
                    {
                        <td><a asp-controller="Reservation" asp-action="Detail" asp-route-id="@seg.ReservationId">@(index + 1)</a></td>
                    }
                    else
                    {
                        <td>@(index + 1)</td>
                    }
                    <td>@seg.Start</td>
                    <td>@seg.End</td>
                </tr>
            }
        </tbody>
    </table>
</section>
</main>

@section Styles {
<style>
#workspace-detail-page {
    menu {
        display: flex;
        justify-content: flex-end;
        gap: 0.25rem;
    }

    div.timeline-wrapper {
        margin: 3em;
        position: relative;       /* for axis positioning */
    }

    ol.timeline {
        list-style: none;
        display: flex;
        width: auto;
        height: 5rem;
        padding: 0;
        margin: 0;
        border: 1px solid #ccc;
        border-radius: 4px;
        overflow: hidden;
        background: #fafafa;
    }

    ol.timeline li.segment {
        display: flex;
        flex: 0 0 auto;
        align-items: center;
        justify-content: center;
        padding: 0 0.25rem;
        box-sizing: border-box;
        white-space: nowrap;
        font-size: 0.75rem;
        text-overflow: ellipsis;
    }

    /* hide tooltip by default */
    .tooltip {
        display: none;
        position: absolute;
        top: -2rem;               /* tweak vertical offset */
        left: 50%;
        transform: translateX(-50%);
        white-space: nowrap;
        background: rgba(0,0,0,0.75);
        color: #fff;
        padding: 0.25rem 0.5rem;
        font-size: 1.5rem;
        pointer-events: none;
        z-index: 10;
    }

    /* show it when you hover the segment */
    li.segment.reserved {
        background: #96a3f3;
        color: #1e1e2e;
        border-right: 1px solid #fff;
        
        &:hover .tooltip {
            display: block; 
        }
    }

    li.segment.free {
        background: #f5f5f5;
        @* position: relative; *@

        a {
            inset: 0;
            display: flex;            
            align-items: center;
            justify-content: center;
            text-align: center; 
        }

        &:hover .tooltip {
            display: block; 
        }
    }

    /* new axis container */
    .timeline-axis {
        position: relative;
        margin-bottom: 4em;
        padding-top: 0.5rem;

        .tick {
            position: relative;

            span {
                position: absolute;
                transform: translateX(-50%);
                font-size: 0.8rem;
                white-space: nowrap;
            }

            &::before {
                content: "";
                position: absolute;
                top: -5px;               
                transform: translateX(-50%);
                border-left: 0.25rem solid transparent;
                border-right: 0.25rem solid transparent;
                border-bottom: 0.25rem solid;
            }
        }
    }


    table {
        border-collapse: collapse;
        width: 100%;

        td {
            border: 1px solid #dddddd;
            text-align: left;
            padding: 8px;
        }

        th {
            border: 1px solid #dddddd;
            text-align: left;
            padding: 8px;
        }
    }

}
</style>
}
