@using CoworkingApp.Models.DataModels;
@model CoworkingApp.Models.ViewModels.WorkspaceDetailViewModel;

@{
    ViewBag.Title = "Workspace Detail";
    Layout = "_Layout";

    var latestWorkspaceHistory = Model.Histories.MaxBy(x => x.ChangeAt);


    var maxDateTime = (DateTime a, DateTime b) => {
        if (a > b) return a;
        return b;
    };

    var minDateTime = (DateTime a, DateTime b) => {
        if (a < b) return a;
        return b;
    };


    // sample working hours for the day
    var timelineStart = DateTime.Today;
    var timelineEnd = minDateTime(Model.Reservations.Max(x => x.EndTime), DateTime.Today.AddYears(2));


    // sorted reservations by time, filtered by timeline span
    var reservations = Model.Workspace.Reservations
        .OrderBy(r => r.StartTime)
        .Where(x => timelineStart <= x.EndTime && x.StartTime <= timelineEnd)
        .ToList();


    // build segments of free and reserved times
    var segments = new List<(DateTime Start, DateTime End, bool IsReserved)>();
    var cursor = timelineStart;


    foreach (var res in reservations)
    {
        if (cursor < res.StartTime)  // free before this reservation?
            segments.Add((cursor, maxDateTime(timelineStart, res.StartTime), false));

        segments.Add((maxDateTime(timelineStart, res.StartTime), res.EndTime, true));  // this reserved segment
        cursor = res.EndTime; // next
    }


    if (cursor < timelineEnd)  // free after last reservation?
        segments.Add((cursor, timelineEnd, false));


    var totalHours = (timelineEnd - timelineStart).TotalHours;  
}

<main id="workspace-detail-page">
    <!-- breadcrumb -->
    <nav aria-label="breadcrumb">
        <a asp-action="Index">go to workspace listing</a>
    </nav>

    <!-- details panel -->
    <section aria-labelledby="workspace-details-heading">
        <!-- name -->
        <h1 id="center-name">@Model.Workspace.Name</h1>
        <p><strong>Price:</strong> @(Model.Workspace.WorkspacePricings.MaxBy(x => x.ValidFrom)!.PricePerHour)&dollar; per hour</p>

        <!-- description -->
        <p>@Model.Workspace.Description</p>

        @if (latestWorkspaceHistory != null) {
            @switch (latestWorkspaceHistory.Status.Type)
            {
                case WorkspaceStatusType.Available:
                    <p><em>This workspace is currently available.</em></p>
                    break;
                case WorkspaceStatusType.Reserved:
                case WorkspaceStatusType.Occupied:
                    <p><b><em>Sorry, this workspace is currently not available.</em></b></p>
                    break;
                case WorkspaceStatusType.UnderMaintenance:
                    <p><b><em>Sorry, this workspace is currently under maintainance.</em></b></p>
                    break;
            }
        }

        <p>
            This workspace is located in
            <b><a asp-controller="CoworkingCenter" asp-action="Detail" asp-route-id="@Model.CoworkingCenter.CoworkingCenterId">@Model.CoworkingCenter.Name</a></b> 
            coworking center.
        </p>

        <!-- address -->
        <address>
            @Model.CoworkingCenter.Address.StreetAddress<br/>
            @Model.CoworkingCenter.Address.City.Name, @Model.CoworkingCenter.Address.City.Country.Name<br/>
            Lat: @Model.CoworkingCenter.Address.Latitude, Lng: @Model.CoworkingCenter.Address.Longitude
        </address>

        <menu>
            @if (User.Identity != null && User.Identity.IsAuthenticated)
            {
                <menuitem>
                    <a asp-controller="Workspace" asp-action="Reserve"
                    asp-route-id="@Model.Workspace.WorkspaceId"
                    asp-route-startTime="@(DateTime.Now.AddHours(1))"
                    asp-route-endTime="@(DateTime.Now.AddDays(1))">
                        make a reservation
                    </a>
                </menuitem>
            }
            else
            {
                <menuitem>
                    <a asp-controller="Account" asp-action="Login">
                       make a reservation
                    </a>
                </menuitem>
            }
        </menu>
    </section>

    <hr />
    
    <!-- availability-timeline-heading -->
    <section aria-labelledby="availability-timeline-heading">
        <h2 id="availability-timeline-heading">Availability Timeline</h2>

        <div class="timeline-wrapper">
            <ol class="timeline">
                @foreach(var (seg, index) in segments.WithIndex()) 
                {
                    var widthPercent = (seg.End - seg.Start).TotalHours / totalHours * 100;  // calculate width %
                    var tooltipText = $"{index + 1}) {seg.Start.ToString()} - {seg.End.ToString()}";

                    <li class="segment @(seg.IsReserved ? "reserved" : "free")" 
                        style="width:@widthPercent%">
                        @if (seg.IsReserved)
                        {
                            <a>
                                @(index + 1)
                                @* <time datetime="@seg.Start">@seg.Start</time>&RightArrow;
                                <time datetime="@seg.End">@seg.End</time>         *@
                            </a>
                        }
                        else
                        {
                            @if (!User.Identity?.IsAuthenticated ?? false)
                            {
                                <a asp-controller="Account" asp-action="Login">
                                    @(index + 1)
                                    @* <time datetime="@seg.Start">@seg.Start</time>&RightArrow;
                                    <time datetime="@seg.End">@seg.End</time> *@
                                </a>
                            }
                            else
                            {
                                <a asp-controller="Workspace" asp-action="Reserve"
                                    asp-route-id="@Model.Workspace.WorkspaceId"
                                    asp-route-startTime="@maxDateTime(seg.Start, DateTime.Now.AddHours(1))"
                                    asp-route-endTime="@seg.End"
                                    >
                                    @(index + 1)
                                    @* <time datetime="@seg.Start">@seg.Start</time>&RightArrow;
                                    <time datetime="@seg.End">@seg.End</time> *@
                                </a>
                            }
                        }
                        <div class="tooltip">@tooltipText</div>
                    </li>
                }
            </ol>
            <div class="timeline-axis">
                @{
                    var tickCount = 4;
                    var tickHoursStep = totalHours / tickCount;
                    var it = timelineStart;

                    while (it <= timelineEnd) {
                        var leftPercent = (it - timelineStart).TotalHours / totalHours * 100;
                        
                        <div class="tick" style="left:@leftPercent%">
                            <span>@it.ToString()</span>
                        </div>;

                        it = it.AddHours(tickHoursStep);
                    }
                }
            </div>
        </div>

        <h3>Reservations</h3>
        <table>
            <thead>
                <th>#</th>
                <th>start</th>
                <th>end</th>
            </thead>    
            <tbody>
                @foreach(var (seg, index) in segments.Where(x => x.IsReserved).WithIndex())
                {
                    <tr>
                        <td>@(index + 1)</td>
                        <td>@seg.Start</td>
                        <td>@seg.End</td>
                    </tr>
                }
            </tbody>
        </table>
    </section>
</main>

@section Styles {
<style>
#workspace-detail-page {
    menu {
        display: flex;
        justify-content: flex-end;
        gap: 0.25rem;
    }

    div.timeline-wrapper {
        margin: 3em;
        position: relative;       /* for axis positioning */
    }

    ol.timeline {
        list-style: none;
        display: flex;
        width: auto;
        height: 5rem;
        padding: 0;
        margin: 0;
        border: 1px solid #ccc;
        border-radius: 4px;
        overflow: hidden;
        background: #fafafa;
    }

    ol.timeline li.segment {
        display: flex;
        flex: 0 0 auto;
        align-items: center;
        justify-content: center;
        padding: 0 0.25rem;
        box-sizing: border-box;
        white-space: nowrap;
        font-size: 0.75rem;
        text-overflow: ellipsis;
    }

    /* hide tooltip by default */
    .tooltip {
        display: none;
        position: absolute;
        top: -2rem;               /* tweak vertical offset */
        left: 50%;
        transform: translateX(-50%);
        white-space: nowrap;
        background: rgba(0,0,0,0.75);
        color: #fff;
        padding: 0.25rem 0.5rem;
        font-size: 1.5rem;
        pointer-events: none;
        z-index: 10;
    }

    /* show it when you hover the segment */
    li.segment.reserved {
        background: #96a3f3;
        color: #1e1e2e;
        border-right: 1px solid #fff;
        
        &:hover .tooltip {
            display: block; 
        }
    }

    li.segment.free {
        background: #f5f5f5;
        @* position: relative; *@

        a {
            inset: 0;
            display: flex;            
            align-items: center;
            justify-content: center;
            text-align: center; 
        }

        &:hover .tooltip {
            display: block; 
        }
    }

    /* new axis container */
    .timeline-axis {
        position: relative;
        margin-bottom: 4em;
        padding-top: 0.5rem;

        .tick {
            position: relative;

            span {
                position: absolute;
                transform: translateX(-50%);
                font-size: 0.8rem;
                white-space: nowrap;
            }

            &::before {
                content: "";
                position: absolute;
                top: -5px;               
                transform: translateX(-50%);
                border-left: 0.25rem solid transparent;
                border-right: 0.25rem solid transparent;
                border-bottom: 0.25rem solid;
            }
        }
    }


    table {
        border-collapse: collapse;
        width: 100%;

        td {
            border: 1px solid #dddddd;
            text-align: left;
            padding: 8px;
        }

        th {
            border: 1px solid #dddddd;
            text-align: left;
            padding: 8px;
        }
    }

}
</style>
}
