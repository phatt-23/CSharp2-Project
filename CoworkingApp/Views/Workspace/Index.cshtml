@using CoworkingApp.Models.DataModels
@using CoworkingApp.Services
@using CoworkingApp.Services.Repositories
@using System.Globalization
@using CoworkingApp.Types
@model CoworkingApp.Models.ViewModels.WorkspaceIndexViewModel;

@{
    ViewBag.Title = "Workspaces";
    Layout = "_Layout";

    var pageCount = Math.Ceiling(Model.TotalCount / (decimal)Model.Pagination.PageSize);

    // send this data to the js side below to add them onto the leaflet map
    var workspaceData = Model.Workspaces
        .ToList()
        .Select(w =>
        {
            var city = (w.CoworkingCenter.Address.City != null) ? w.CoworkingCenter.Address.City?.Name : "NO CITY";
            var country = (w.CoworkingCenter.Address.City?.Country != null) ? w.CoworkingCenter.Address.City?.Country?.Name : "NO COUNTRY";

            var addressDiplay = $"{w.CoworkingCenter.Address.StreetAddress}, {city}, {country}";

            return new
            {
                w.WorkspaceId,
                w.Name,
                w.Description,
                w.CoworkingCenter.Address,
                AddressDisplayName = addressDiplay, 
            };
        });

    var workspaceJson = System.Text.Json.JsonSerializer.Serialize(workspaceData, JsonDefaults.NO_CYCLES);
}

@section Scripts {
    <script>
        let centersMap = undefined;

        document.addEventListener("DOMContentLoaded", async function () {
            const map = $('#centers-map')[0]
            centersMap = L.map(map).setView([50.0755, 14.4378], 2)  // prague

            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                maxZoom: 19,
                attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
            }).addTo(centersMap)

            const workspaces = @Html.Raw(workspaceJson)  // deserialize center data from Razor

            let markers = new Map()

            workspaces.forEach(ws => {
                const { Latitude: lat, Longitude: lng } = ws.Address
                const key = `${lat},${lng}`

                if (markers.has(key)) {
                    const marker = markers.get(key)
                    const extra = `
                        <strong><a href='/Workspace/Detail/${ws.WorkspaceId}'>${ws.Name}</a></strong>
                        <br>
                    `
                    const existing = marker.getPopup().getContent()
                    marker.getPopup().setContent(extra + existing)
                } else {
                    const marker = L.marker([lat, lng])
                        .addTo(centersMap)
                        .bindPopup(`
                            <strong><a href='/Workspace/Detail/${ws.WorkspaceId}'>${ws.Name}</a></strong>
                            <br>
                            <p><strong>${ws.AddressDisplayName}</strong></p>
                            <a align='right' href='/Workspace/Detail/${ws.WorkspaceId}'>View detail</a>
                        `)

                    markers.set(key, marker)
                }
            })
        })

        function seeOnMap(latitude, longitude) {
            centersMap.flyTo([latitude, longitude], 12, { duration: 1 });
        }
    </script>
}

<main id="workspace-index-page">
    <h1>Workspaces</h1>

    <section id="map-section" aria-label="Map of all workspaces">
        <div id="centers-map" style="height: 400px;"></div>
    </section>

    <div id="sort-and-pagination">
        <!-- Sort -->
        <section>
            @using (Html.BeginForm(
                actionName: "Index",
                controllerName: "Workspace",
                method: FormMethod.Get))
            {
                @Html.LabelFor(m => m.Sort, "Sort by:")
                @Html.DropDownListFor(
                    m => m.Sort,
                    new SelectList(new[] {
                        new { Value=WorkspaceSort.None.ToString(), Text="None" },
                        new { Value=WorkspaceSort.PriceDescending.ToString(), Text="Price: High to Low" },
                        new { Value=WorkspaceSort.PriceAscending.ToString(), Text="Price: Low to High" }
                    }, "Value", "Text", Model.Sort),
                    new { onchange = "this.form.submit()" }
                )
            }
        </section>

        <!-- Pagination -->
        <section id="pagination-section">
            @Html.ActionLink("Back", "Index", "Workspace", new
            {
                PageNumber = Math.Max(Model.Pagination.PageNumber - 1, 1), 
                PageSize = Model.Pagination.PageSize
            })

            @for (var i = 1; i <= pageCount; i++)
            {
                if (i == Model.Pagination.PageNumber) 
                {
                    <u>
                        <b>@Html.ActionLink(i.ToString(), "Index", "Workspace", new { PageNumber = i, Model.Pagination.PageSize })</b>
                    </u>
                }
                else
                {
                    @Html.ActionLink(i.ToString(), "Index", "Workspace", new { PageNumber = i, Model.Pagination.PageSize })
                }
            }

            @Html.ActionLink("Next", "Index", "Workspace", new { PageNumber = Math.Min(Model.Pagination.PageNumber + 1, pageCount), PageSize = Model.Pagination.PageSize })
        </section>
    </div>
    
    @if (Model.Workspaces.Any())
    {
        <!-- workspace cards -->
        <ul>
        @foreach (var ws in Model.Workspaces)
        {
            <li>
                <article>
                    <h3>@ws.Name</h3>
                    <p>@ws.Description</p>
                    <p><strong>Coworking Center:</strong> @ws.CoworkingCenter.Name</p>
                    <p><strong>Address:</strong> @ws.CoworkingCenter.Address.StreetAddress, @(ws.CoworkingCenter.Address.City?.Name ?? "NO CITY"), @(ws.CoworkingCenter.Address.City?.Country.Name ?? "NO COUNTRY")</p>
                    <p><strong>Price:</strong> @ws.GetCurrentPricePerHour()$ per hour</p>
                    <p><strong>Status:</strong> @ws.GetCurrentStatus().Type.ToReprString()</p>
                    <menu class="workspace-card-controls">
                        @Html.ActionLink(linkText: "View Detail", actionName: "Detail", controllerName: "Workspace", routeValues: new { id = ws.WorkspaceId })
                        <a href="#map-section" 
                           onclick="seeOnMap(@ws.CoworkingCenter.Address.Latitude.ToString(CultureInfo.InvariantCulture), @ws.CoworkingCenter.Address.Longitude.ToString(CultureInfo.InvariantCulture))">
                           See on map
                       </a>
                    </menu>
                </article>
            </li>
        }
        </ul>
    }
    else
    {
        <p>Sorry, there are no coworking centers available.</p>
    }
</main>


@section Styles {
<style>
#workspace-index-page {
    display: flex;
    flex-direction: column;
}

#workspace-index-page 
#sort-and-pagination {
    display: flex;
    justify-content: space-between;
    margin-top: 2rem;
}

#workspace-index-page 
#pagination-section {
    gap: 0.75rem;
}

#workspace-index-page 
#pagination-section
a {
    margin-left: 0.5rem;
    text-decoration: none;
}

#workspace-index-page 
ul {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    list-style: none;
    padding: 0;
    row-gap: 0.5rem;
    column-gap: 0.5rem;
}

#workspace-index-page 
ul li {
    margin-block: 0.5rem;
}

#workspace-index-page 
ul li article {
    display: flex;
    flex-direction: column;
    border: 1px solid gray;
    padding: 0.5rem;
    box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    height: 100%;
}
 
#workspace-index-page 
ul li article
h2, h3, h4, p {
        color: black;
}
         
#workspace-index-page 
ul li article
.workspace-card-controls {
    margin-top: auto;  /* push to bottom */ 
    display: flex;
    justify-content: flex-end;
    gap: 0.5rem;
}

#workspace-index-page 
ul li article:hover {
    box-shadow: 0 8px 16px rgba(0,0,0,0.2);
}
</style>
}
