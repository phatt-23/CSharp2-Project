@using CoworkingApp.Types
@model CoworkingApp.Models.ViewModels.HomeIndexViewModel;

@{
    @* ViewData["Title"] = "DeskSpace"; *@
    
    // send this data to the js side below to add them onto the leaflet map
    var centersData = Model.CoworkingCenters.AsQueryable()
        .Select(c => new {
            c.CoworkingCenterId,
            c.Name, 
            c.Description,
            c.Address,
        });

    string centersJson = System.Text.Json.JsonSerializer.Serialize(centersData, JsonDefaults.NO_CYCLES);
}

<main id="home-index">
<section>
    <h2>
        @Html.ActionLink(linkText: "Our Coworking Centers", actionName: "Index", controllerName: "CoworkingCenter")
    </h2>
    <section>
        <ul>
        @foreach (var center in Model.CoworkingCenters.Take(8))
        {
            <li>
                <article>
                    <a asp-controller="CoworkingCenter" asp-action="Detail" asp-route-id="@center.CoworkingCenterId">
                        <h4>@center.Name</h4>
                        <p>@center.Description</p>
                    </a>
                </article>
            </li>
        }
        </ul>
    </section>
    <section aria-labelledby="goto-coworking-centers-index">
        @Html.ActionLink(linkText: "See all coworking centers", actionName: "Index", controllerName: "CoworkingCenter")
    </section>
    <section aria-label="Map of coworking centers">
        <div id="map" style="height: 400px;"></div>
    </section>
</section>
</main>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const container = document.getElementById('map')
            const map = L.map(container).setView([50.0755, 14.4378], 2)  // prague

            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '&copy; OpenStreetMap contributors'
            }).addTo(map)

            const centers = @Html.Raw(centersJson)  // deserialize center data from Razor

            centers.forEach(center => {
                L.marker([center.Address.Latitude, center.Address.Longitude])
                    .addTo(map)
                    .bindPopup(`
                        <strong><a href='/coworking-center/${center.CoworkingCenterId}'>${center.Name}</a></strong>
                        <br>
                        <p>${center.Description}</p>
                        <a align='right' href='/coworking-center/${center.CoworkingCenterId}'>View detail</a>
                    `)
            })
        })
    </script>
}

@section Styles {
<style>
/* List container */
#home-index ul {
  list-style: none;
  margin: 1rem;
  padding: 0;
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  column-gap: 0.5rem;
  row-gap: 0.5rem;
}

/* List items */
#home-index ul li {
  margin-block: 0.5rem;
}

/* Article cards */
#home-index ul article {
  display: flex;
  flex-direction: column;
  height: 100%;
  border: 1px solid grey;
  padding: 0.5rem;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
}

/* Headings inside cards */
#home-index ul article h2,
#home-index ul article h3,
#home-index ul article h4 {
  color: black;
}

/* Paragraphs inside cards */
#home-index ul article p {
  color: black;
}

/* Link to coworking centers index */
#home-index #coworking-center-index-link {
  color: black;
}

/* Hover effect on cards */
#home-index ul article:hover {
  box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
}

/* Links wrapping cards or content */
#home-index ul a {
  display: flex;
  flex-direction: column;
  flex: 1;
  text-decoration: none;
}

/* Specific heading margin inside lists */
#home-index ul h4 {
  margin: 0 0 0.5em;
}

/* Specific paragraph behavior inside lists */
#home-index ul p {
  margin: 0;
  flex-grow: 1;
}

/* Map section spacing */
#home-index section[aria-labelledby="home-index-map"] {
  margin-top: 4rem;
}

/* "Go to coworking centers index" alignment */
#home-index section[aria-labelledby="goto-coworking-centers-index"] {
  text-align: right;
  margin-bottom: 2rem;
}

</style>
}