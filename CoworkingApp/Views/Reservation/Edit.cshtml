@using System.Globalization
@using CoworkingApp.Models.Misc
@model CoworkingApp.Models.ViewModels.ReservationEditViewModel;

@{
    ViewBag.Title = "title";
    Layout = "_Layout";
}

@functions {
    DateTime MaxDateTime(DateTime a, DateTime b)
    {
        return a > b ? a : b;
    }
}

<h2>Edit Reservation</h2>

@if (ViewData.ModelState.Values.Any(v => v.Errors.Count > 0))
{
    <div class="alert alert-danger">
        <h3>Error</h3>
        <ul>
            @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
            {
                <li class="alert-danger">@error.ErrorMessage</li>
            }
        </ul>
    </div>
}

@Html.ActionLink(
        linkText: "Go to dashboard", 
        actionName: "Dashboard", 
        controllerName: "Home")

@using (Html.BeginForm(actionName: "Edit", controllerName: "Reservation", method: FormMethod.Post))
{
    @Html.HiddenFor(x => x.Request.ReservationId)

    <div class="form-row">
        @Html.LabelFor(x => x.Request.StartTime, labelText: "Start time")
        <input type="datetime-local"
               asp-for="@Model.Request.StartTime"
               value="@Model.Request.StartTime.ToString("s")" />
        @Html.ValidationMessageFor(x => x.Request.StartTime, message: "", htmlAttributes: new { @class = "field-error" })
    </div>

    <div class="form-row">
        @Html.LabelFor(x => x.Request.EndTime, labelText: "End time")
        <input type="datetime-local"
               asp-for="@Model.Request.EndTime"
               value="@Model.Request.EndTime.ToString("s")" />
        @Html.ValidationMessageFor(x => x.Request.EndTime, message: "", htmlAttributes: new { @class = "field-error" })
    </div>

    <menu>
        <menuitem>
            <button type="submit">Edit</button>
        </menuitem>
    </menu>
}

<hr />

<!-- availability timeline -->
<section id="availability-timeline">
    <h2>Availability Timeline</h2>

    <div class="timeline-wrapper">
        <ol class="timeline">
            @foreach (var (segment, index) in Model.TimelineSegments.WithIndex())
            {
                var tooltipText =
                    $"<strong>{index + 1})</strong>" +
                    $"<p><strong>Start:</strong> {segment.Start:f}</p>" +
                    $"<p><strong>End:</strong> {segment.End:f}</p>";

                <li class="segment @(segment.IsReserved ? "reserved" : "free")"
                    style="width:@((segment.Width * 100).ToString(System.Globalization.CultureInfo.InvariantCulture))%">
                    @if (segment.IsReserved)
                    {
                        if (segment.BelongsToUser)
                        {
                            @Html.ActionLink(
                                     linkText: $"{index + 1}",
                                     actionName: "Detail",
                                     controllerName: "Reservation",
                                     routeValues: new { id = segment.ReservationId })
                        }
                        else
                        {
                            <a>@(index + 1)</a>
                        }
                    }
                    else
                    {
                        @if (User.IsAuthenticated())
                        {
                            @Html.ActionLink(
                                     linkText: $"{index + 1}",
                                     actionName: "Reserve",
                                     controllerName: "Workspace",
                                     routeValues: new
                                     {
                                         id = Model.Workspace.WorkspaceId,
                                         startTime = MaxDateTime(segment.Start, DateTime.Now.AddHours(1)).ToString("s", CultureInfo.InvariantCulture),
                                         endTime = segment.End.ToString("s", CultureInfo.InvariantCulture)
                                     })
                        }
                        else
                        {
                            @Html.ActionLink(
                                     linkText: $"{index + 1}",
                                     actionName: "Login",
                                     controllerName: "Account")
                        }
                    }

                    <div class="tooltip">@Html.Raw(tooltipText)</div>
                </li>
            }
        </ol>
        <div class="timeline-axis">
            @{
                var tickCount = 4;
                var tickHoursStep = Model.TotalHours / tickCount;
                var it = Model.TimelineStart;

                while (it <= Model.TimelineEnd)
                {
                    var leftPercent = (it - Model.TimelineStart).TotalHours / Model.TotalHours * 100;

                    <div class="tick" style="left:@leftPercent.ToString(System.Globalization.CultureInfo.InvariantCulture)%">
                        <span>
                            @it.ToString("D")
                            <br />
                            @it.ToString("t")
                        </span>
                    </div>

                    it = it.AddHours(tickHoursStep);
                }
            }
        </div>
    </div>

    <h3>Reservations</h3>
    <table>
        <thead>
            <th>#</th>
            <th>start</th>
            <th>end</th>
        </thead>
        <tbody>
            @foreach (var (reservation, index) in Model.Reservations.WithIndex())
            {
                <tr>
                    @if (reservation.CustomerId == Model.UserId)
                    {
                        <td>
                            @Html.ActionLink(
                                     linkText: $"{index + 1}",
                                     actionName: "Detail",
                                     controllerName: "Reservation",
                                     routeValues: new { id = reservation.ReservationId })
                        </td>
                    }
                    else
                    {
                        <td>@(index + 1)</td>
                    }
                    <td>@reservation.StartTime</td>
                    <td>@reservation.EndTime</td>
                </tr>
            }
        </tbody>
    </table>
</section>


@section Styles {
    <style>
        menu {
            display: flex;
            justify-content: flex-end;
            gap: 0.25rem;
        }

        .form-row {
            display: flex;
            align-items: center;
            margin-block: 1rem;
        }

        .form-row label {
            flex: 0 0 16rem; /* fixed width for labels */
            margin-right: 0.5rem;
        }

        .form-row input {
            flex: 1; /* take up remaining space */
            margin-right: 0.5rem;
        }

        .field-error {
            color: #c00; /* red for errors */
            font-size: 0.9em;
            white-space: nowrap;
        }

        .form-controls {
            display: flex;
            justify-content: space-between;
            text-align: right;
            margin-top: 1rem;
        }


        div.timeline-wrapper {
            margin: 3em;
            position: relative; /* for axis positioning */
        }

        ol.timeline {
            list-style: none;
            display: flex;
            width: auto;
            height: 5rem;
            padding: 0;
            margin: 0;
            border: 1px solid #ccc;
            border-radius: 4px;
            overflow: hidden;
            background: #fafafa;
        }

            ol.timeline li.segment {
                display: flex;
                flex: 0 0 auto;
                align-items: center;
                justify-content: center;
                padding: 0 0.25rem;
                box-sizing: border-box;
                white-space: nowrap;
                font-size: 0.75rem;
                text-overflow: ellipsis;
            }

        /* hide tooltip by default */
        .tooltip {
            display: none;
            position: absolute;
            top: -12rem; /* tweak vertical offset */
            left: 50%;
            transform: translateX(-50%);
            white-space: nowrap;
            background: rgba(0,0,0,0.75);
            color: #fff;
            padding: 0.25rem 0.5rem;
            font-size: 1.5rem;
            pointer-events: none;
            z-index: 10;
        }

        /* show it when you hover the segment */
        li.segment.reserved {
            background: #96a3f3;
            color: #1e1e2e;
            border-right: 1px solid #fff;
            &:hover .tooltip

        {
            display: block;
        }

        }

        li.segment.free {
            background: #f5f5f5;
    @* position: relative; *@

            a

        {
            inset: 0;
            display: flex;
            align-items: center;
            justify-content: center;
            text-align: center;
        }

        &:hover .tooltip {
            display: block;
        }

        }

        /* new axis container */
        .timeline-axis {
            position: relative;
            margin-bottom: 4em;
            padding-top: 0.5rem;
            .tick

        {
            position: relative;
            span

        {
            position: absolute;
            transform: translateX(-50%);
            font-size: 0.8rem;
            white-space: nowrap;
        }

        &::before {
            content: "";
            position: absolute;
            top: -5px;
            transform: translateX(-50%);
            border-left: 0.25rem solid transparent;
            border-right: 0.25rem solid transparent;
            border-bottom: 0.25rem solid;
        }

        }
        }


        table {
            border-collapse: collapse;
            width: 100%;
            td

        {
            border: 1px solid #dddddd;
            text-align: left;
            padding: 8px;
        }

        th {
            border: 1px solid #dddddd;
            text-align: left;
            padding: 8px;
        }

        }
    </style>
}
